
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    lua_package_path "/path/to/lua-resty-upstream-healthcheck/lib/?.lua;;";

    lua_shared_dict healthcheck 1m;

    upstream foo.com {
        server 10.10.0.8:8001;
        server 10.10.0.8:8002;
        server 10.10.0.8:8003 backup;
    }

    upstream foo1.com {
        server 10.10.0.8:8001;
        server 10.10.0.8:8002;
        server 10.10.0.8:8003 backup;
    }

    init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"

        local ok, err = hc.spawn_checker{
            -- 内存字典名
            shm = "healthcheck",
            -- upstream名
            upstream = "foo.com",
            -- 类型，只支持http
            type = "http",

            --请求头
            http_req = "GET /index.html HTTP/1.1\r\nHost: foo.com\r\n\r\n",
            
            -- 轮询间隔
            interval = 2000,
            -- 超时时间
            timeout = 3000,
            -- 失败多少次后标记为down
            fall = 3,
            --成功多少次后标记为up
            rise = 1,
            --http监测状态
            valid_statuses = {200, 302},
            --并发度
            concurrency = 10,
        }
        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
            return
        end
    }

    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location = /status {
            default_type text/plain;
            content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                ngx.say("Nginx Worker PID: ", ngx.worker.pid())
                ngx.print(hc.status_page())
            }
        }

        location = / {
            proxy_set_header Host $host:$server_port;
            proxy_set_header Remote_Addr $remote_addr;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://foo.com;
        }

    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #



    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
