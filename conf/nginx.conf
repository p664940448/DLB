
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    lua_shared_dict dyn_ups_zone 10m;
    init_worker_by_lua_file /lua/init_new.lua;

    
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            set_by_lua_file $cur_ups /lua/proxy_new.lua;
            proxy_next_upstream off;  
            proxy_set_header Host $host:$server_port;
            proxy_set_header Remote_Addr $remote_addr;
            proxy_set_header remote-user-ip $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://$cur_ups;
        }

    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    server {
        listen       8000;
        server_name  somename;

        location /api_delete {
             default_type application/json;
             add_header Content-Type 'application/json; charset=utf-8';
             content_by_lua_file /lua/delete_new.lua;
        }

        location /api_stop {
             default_type application/json;
             add_header Content-Type 'application/json; charset=utf-8';
             content_by_lua_file /lua/stop_new.lua;
        }


        location /api_addUps {
           default_type application/json;
           add_header Content-Type 'application/json; charset=utf-8';
           content_by_lua_file /lua/addUps_new.lua;
        }

        location /api_getUpstreams {
            default_type application/json;
            add_header Content-Type 'application/json; charset=utf-8';
            content_by_lua_file /lua/upstreams_new.lua;
        }

        location /api_checkPassword {
            default_type application/json;
            add_header Content-Type 'application/json; charset=utf-8';
            content_by_lua_file /lua/checkPassword_new.lua;
        }

        location /api_exit {
            default_type application/json;
            add_header Content-Type 'application/json; charset=utf-8';
            content_by_lua_file /lua/exit_new.lua;
        }


        location = /index.html {

            content_by_lua_block {
                local ps = require("lua.password")
                if ps.checkLogin() then
                    ngx.exec("@index")
                else
                    ngx.redirect("/login.html")
                    return
                end
            }

         
        }

        location @index {
            root /html;
            index index.html;
        }

        location / {
            root /html;
        }       
    }


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
